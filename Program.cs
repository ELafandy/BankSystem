//There is some points edited by Ai Couse i don;t understand all details needed
//And the Main to display by Ai Too
namespace BankSystemSimple
{
    class Program
    {
        static void Main(string[] args)
        {
            Bank bank = new Bank("QNB","12354");
            while (true)
            {
                //This by Ai
                Console.WriteLine("Bank Menu : ");
                Console.WriteLine("*********************************************************");
                Console.WriteLine("1. Add Customer");
                Console.WriteLine("2. Update Customer");
                Console.WriteLine("3. Remove Customer");
                Console.WriteLine("4. Search Customer");
                Console.WriteLine("5. Deposit");
                Console.WriteLine("6. Withdraw");
                Console.WriteLine("7. Transfer");
                Console.WriteLine("8. Show Bank Report");
                Console.WriteLine("9. Calculate Monthly Interest");
                Console.WriteLine("10. Show Account Transactions");
                Console.WriteLine("0. Exit");
                Console.WriteLine("*********************************************************");
                Console.Write("Enter choice: ");
                string choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                        {
                            bank.AddCustomer();
                            break;
                        }
                    case "2":
                        {
                            bank.UpdateCustomer();
                            break;
                        }
                    case "3":
                        {
                            bank.RemoveCustomer();
                            break;
                        }
                    case "4":
                        {
                            bank.SearchCustomer();
                            break;
                        }
                    case "5":
                        {
                            bank.Deposit();
                            break;
                        }
                    case "6":
                        {
                            bank.Withdraw();
                            break;
                        }
                    case "7":
                        {
                            bank.Transfer();
                            break;
                        }
                    case "8":
                        {
                            bank.ShowBankReport();
                            break;
                        }
                    case "9":
                        {
                            bank.CalculateMonthlyInterest();
                            break;
                        }
                    case "10":
                        {
                            bank.ShowAccountTransactions();
                            break;
                        }
                    case "0":
                        {
                            return;
                        }
                    default:
                        {
                            Console.WriteLine("Invalid choice");
                            break;
                        }

                }
            }
        }
    }
    class Bank
    {
        public string Name;
        public string Code;
        private Customer[] customers = new Customer[1000];
        private int customerCount = 0;
        private int customerIdCounter = 1;
        private int accountNumberCounter = 1000;
        public Bank(string name, string code)
        {
            Name = name;
            Code = code;
        }
        //Add new Customer accounts. Each customer must have: A unique ID generated by the system (Full name, National ID, Date of birth)
        public void AddCustomer()
        {
            if (customerCount >= customers.Length)
            {
                Console.WriteLine("Customer limit reached");
                return;
            }
            //User inputt
            Console.Write("Full Name: ");
            string fullName = Console.ReadLine();
            Console.Write("National ID: ");
            string id = Console.ReadLine();
            Console.Write("Date of Birth (yyyy-mm-dd): ");
            DateTime date = DateTime.Parse(Console.ReadLine());
            Customer newCustomer = new Customer(customerIdCounter++, fullName, id, date);
            customers[customerCount++] = newCustomer;
            Console.WriteLine("Customer added");
            AddAccount(newCustomer);
        }
        //Add the ability to update customer details (name, date of birth)
        public void UpdateCustomer()
        {
            Customer c = FindCustomer();
            if (c != null)
            {
                Console.Write("New Name: ");
                c.FullName = Console.ReadLine();
                Console.Write("New Date of Birth (yyyy-mm-dd): ");
                c.DateOfBirth = DateTime.Parse(Console.ReadLine());
                Console.WriteLine("Customer updated successfully");
            }
        }
        //Allow removing a customer (only if all accounts have zero balance)
        public void RemoveCustomer()
        {
            Customer c = FindCustomer();
            if (c != null)
            {
                if (c.TotalBalance() == 0)
                {
                    for (int i = 0; i < customerCount; i++)
                    {
                        if (customers[i] == c)
                        {
                            customers[i] = customers[customerCount - 1];
                            customers[customerCount - 1] = null;
                            customerCount--;
                            Console.WriteLine("Customer removed successfully");
                            return;
                        }
                    }
                }
                else
                {
                    Console.WriteLine("Cannot remove customer Couse it has a balance");
                }
            }
        }
        //Add an option to search for customers by name or national ID
        public void SearchCustomer()
        {
            Console.Write("Enter Name or National ID: ");
            string id = Console.ReadLine();
            for (int i = 0; i < customerCount; i++)
            {
                if (customers[i].FullName == id || customers[i].NationalId == id)
                {
                    customers[i].Display();
                    return;
                }
            }
            Console.WriteLine("Customer not found");
        }

        public void AddAccount(Customer customer)
        {
            //Ask Ai in this point the differance between current and saviing 
            Console.WriteLine("Choose Account Type ");
            Console.WriteLine("Press 1 to Savings ");
            Console.WriteLine("Press 2 to Current");
            Console.Write("Enter Your Choice : ");
            string type = Console.ReadLine();
            Console.Write("Initial Balance: ");
            decimal balance = decimal.Parse(Console.ReadLine());
            Account account;
            if (type == "1")
            {
                Console.Write("Interest Rate (%): ");
                decimal rate = decimal.Parse(Console.ReadLine());
                account = new SavingsAccount(accountNumberCounter++, balance, DateTime.Now, rate);
            }
            else
            {
                Console.Write("Overdraft Limit: ");
                decimal limit = decimal.Parse(Console.ReadLine());
                account = new CurrentAccount(accountNumberCounter++, balance, DateTime.Now, limit);
            }
            customer.AddAccount(account);
            Console.WriteLine("Account created successfull");
        }
        public void Deposit()
        {
            Account acc = ChooseAccount();
            if (acc != null)
            {
                Console.Write("Amount: ");
                decimal amount = decimal.Parse(Console.ReadLine());
                acc.Deposit(amount);
                Console.WriteLine("Deposit successful");
            }
        }
        public void Withdraw()
        {
            Account acc = ChooseAccount();
            if (acc != null)
            {
                Console.Write("Enter the Amount : ");
                decimal amount = decimal.Parse(Console.ReadLine());
                if (acc.Withdraw(amount))
                {
                    Console.WriteLine("Withdrawal successful");
                }
                else
                    Console.WriteLine("Balance isnot engough");
            }
        }
        public void Transfer()
        {
            Console.WriteLine("From Account:");
            Account from = ChooseAccount();
            Console.WriteLine("To Account:");
            Account to = ChooseAccount();

            if (from != null && to != null)
            {
                Console.Write("Amount: ");
                decimal amount = decimal.Parse(Console.ReadLine());
                if (from.Withdraw(amount))
                {
                    to.Deposit(amount);
                    Console.WriteLine("Transfer successful");
                }
                else
                    Console.WriteLine("Balance isn't enough");
            }
        }
        public void ShowBankReport()
        {
            Console.WriteLine("Bank Report : ");
            Console.WriteLine("****************************************");
            for (int i = 0; i < customerCount; i++)
            {
                customers[i].Display();
            }
        }
        //As
        public void CalculateMonthlyInterest()
        {
            for (int i = 0; i < customerCount; i++)
            {
                customers[i].CalculateInterest();
            }
        }

        public void ShowAccountTransactions()
        {
            Account acc = ChooseAccount();
            if (acc != null)
                acc.ShowTransactions();
        }

        private Customer FindCustomer()
        {
            Console.Write("Enter National ID: ");
            string id = Console.ReadLine();
            for (int i = 0; i < customerCount; i++)
            {
                if (customers[i].NationalId == id)
                    return customers[i];
            }
            Console.WriteLine("Customer not found.");
            return null;
        }

        private Account ChooseAccount()
        {
            Customer c = FindCustomer();
            if (c == null) return null;
            c.ListAccounts();
            Console.Write("Choose Account Number: ");
            int num = int.Parse(Console.ReadLine());
            return c.GetAccount(num);
        }
    }

    class Customer
    {
        public int Id;
        public string FullName;
        public string NationalId;
        public DateTime DateOfBirth;
        private Account[] accounts = new Account[10];
        private int accountCount = 0;

        public Customer(int id, string name, string nid, DateTime dob)
        {
            Id = id;
            FullName = name;
            NationalId = nid;
            DateOfBirth = dob;
        }

        public void AddAccount(Account acc)
        {
            accounts[accountCount++] = acc;
        }

        public void ListAccounts()
        {
            for (int i = 0; i < accountCount; i++)
            {
                Console.WriteLine($"{i + 1}. {accounts[i].AccountNumber} And Balance: {accounts[i].Balance}");
            }
        }

        public Account GetAccount(int choice)
        {
            if (choice > 0 && choice <= accountCount)
            {
                return accounts[choice - 1];
            }
            else
            {
                return null;
            }
        }

        public decimal TotalBalance()
        {
            decimal total = 0;
            for (int i = 0; i < accountCount; i++)
            {
                total += accounts[i].Balance;
            }
            return total;
        }

        public void Display()
        {
            Console.WriteLine($"ID: {Id}, Name: {FullName}, NID: {NationalId}, DOB: {DateOfBirth.ToShortDateString()}, Total Balance: {TotalBalance()}");
        }

        public void CalculateInterest()
        {
            for (int i = 0; i < accountCount; i++)
            {
                if (accounts[i] is SavingsAccount sa)
                {
                    decimal interest = sa.Balance * sa.InterestRate / 100 / 12;
                    Console.WriteLine($"Account {sa.AccountNumber} Interest: {interest}");
                }
            }
        }
    }

    abstract class Account
    {
        public int AccountNumber;
        public decimal Balance;
        public DateTime DateOpened;
        protected string[] transactions = new string[100];
        protected int transactionCount = 0;

        public Account(int number, decimal balance, DateTime opened)
        {
            AccountNumber = number;
            Balance = balance;
            DateOpened = opened;
        }

        public void Deposit(decimal amount)
        {
            Balance += amount;
            AddTransaction($"Deposit: {amount}");
        }

        public virtual bool Withdraw(decimal amount)
        {
            if (Balance >= amount)
            {
                Balance -= amount;
                AddTransaction($"Withdraw: {amount}");
                return true;
            }
            return false;
        }

        public void AddTransaction(string details)
        {
            if (transactionCount < transactions.Length)
                transactions[transactionCount++] = $"{DateTime.Now}: {details}";
        }

        public void ShowTransactions()
        {
            Console.WriteLine($"--- Transactions for Account {AccountNumber} ---");
            for (int i = 0; i < transactionCount; i++)
                Console.WriteLine(transactions[i]);
        }
    }

    class SavingsAccount : Account
    {
        public decimal InterestRate;
        public SavingsAccount(int number, decimal balance, DateTime opened, decimal rate) : base(number, balance, opened)
        {
            InterestRate = rate;
        }
    }

    class CurrentAccount : Account
    {
        public decimal OverdraftLimit;
        public CurrentAccount(int number, decimal balance, DateTime opened, decimal limit) : base(number, balance, opened)
        {
            OverdraftLimit = limit;
        }
        public override bool Withdraw(decimal amount)
        {
            if (Balance + OverdraftLimit >= amount)
            {
                Balance -= amount;
                AddTransaction($"Withdraw: {amount}");
                return true;
            }
            return false;
        }
    }
}
